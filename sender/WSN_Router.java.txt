import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;



public class WSN_Router implements ActionListener {

	public Font f2 = new Font("Times new roman", Font.BOLD, 18);
	JFrame jf;
	Container c;
	
	JLabel l0, l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16,l17,l18;
	
	JLabel ls1,ls2;
	JLabel imageLabel;
	JLabel imageLabel1;
	JLabel imageLabel2 ;
	JLabel imageLabel3; 
	JLabel imageLabel4 ;
	JLabel imageLabel5 ;
	JLabel imageLabel6 ;
	JLabel imageLabel7 ;
	JLabel imageLabel8 ;
	JLabel imageLabel9 ;
	JLabel imageLabel10;
	JLabel imageLabel11 ;
	JLabel imageLabel12 ;
	JLabel imageLabel13 ;
	JLabel imageLabel14 ;
	JLabel imageLabel15 ;
	JLabel imageLabel16 ;
	JLabel imageLabel17 ;
	JLabel imageLabel18 ;
	
	
	JLabel imageLabels1 ;
	
	JLabel imageLabel46 ;
	
	JLabel imageLabel911 ;
	JLabel imageLabel1416 ;
	
	
	JLabel imageLabeln13 ;
	
	JLabel imageLabeln68 ;
	
	JLabel imageLabeln1113 ;
	
	JLabel imageLabeln24 ;
	
	JLabel imageLabeln79 ;
	
	JLabel imageLabeln1214 ;
	
	JLabel imageLabeln17s ;
	
	JLabel imageLabeln57 ;
	
	JLabel imageLabeln1012 ;
	
	JLabel imageLabeln1517 ;
	
	
	
	
	JLabel imageLabelsn2 ;
	
	JLabel imageLabeln52 ;
	
	JLabel imageLabeln710;
	JLabel imageLabeln1512 ;
	
	JLabel imageLabeln41 ;
	
	JLabel imageLabeln69 ;
	
	JLabel imageLabeln1114 ;
	
	JLabel imageLabeln16s ;
	
	JLabel imageLabeln47 ;
	
	JLabel imageLabeln912 ;
	
	JLabel imageLabeln1417 ;
	
	JLabel imageLabeln36;
	
	JLabel imageLabeln811 ;
	
	JLabel imageLabeln1316 ;
	String injdata="";
	
	
	
	JLabel attacker,validn;
	
	JButton refresh = new JButton("Refresh");
	JButton viewmacs = new JButton("View MACs");
	
	Timer timer;
	WSN_Router()
	{
		
		jf = new JFrame("WSN Router :: Hop-by-Hop Message Authentication and Source Privacy in Wireless Sensor Networks");
		c = jf.getContentPane();
		c.setLayout(null);	
		c.setBackground(new Color(200,100,150));
		
	 imageLabel = new JLabel();
		ImageIcon ii = new ImageIcon(this.getClass().getResource(
				"Node.jpg"));

		 imageLabel1 = new JLabel();
		 imageLabel2 = new JLabel();
		 imageLabel3 = new JLabel();
		 imageLabel4 = new JLabel();
		 imageLabel5 = new JLabel();
		 imageLabel6 = new JLabel();
		 imageLabel7 = new JLabel();
		 imageLabel8 = new JLabel();
		 imageLabel9 = new JLabel();
		 imageLabel10 = new JLabel();
		 imageLabel11 = new JLabel();
		 imageLabel12 = new JLabel();
		 imageLabel13 = new JLabel();
		 imageLabel14 = new JLabel();
		 imageLabel15 = new JLabel();
		 imageLabel16 = new JLabel();
		 imageLabel17 = new JLabel();
		 imageLabel18 = new JLabel();
		 
		 
		 attacker = new JLabel();
		 validn = new JLabel();
		
		 timer = new Timer(0, null);
		 
		 
		//lines 
		
		 imageLabels1 = new JLabel();
		ImageIcon ls1 = new ImageIcon(this.getClass().getResource(
		"ls01.png"));
		imageLabels1.setIcon(ls1);
		
		 imageLabel46 = new JLabel();
		imageLabel46.setIcon(ls1);
		
		 imageLabel911 = new JLabel();
		imageLabel911.setIcon(ls1);
		
		 imageLabel1416 = new JLabel();
		imageLabel1416.setIcon(ls1);
		
		
		 imageLabeln13 = new JLabel();
		imageLabeln13.setIcon(ls1);
		
		 imageLabeln68 = new JLabel();
		imageLabeln68.setIcon(ls1);
		
		 imageLabeln1113 = new JLabel();
		imageLabeln1113.setIcon(ls1);
		
		 imageLabeln24 = new JLabel();
		imageLabeln24.setIcon(ls1);
		
		 imageLabeln79 = new JLabel();
		imageLabeln79.setIcon(ls1);
		
		 imageLabeln1214 = new JLabel();
		imageLabeln1214.setIcon(ls1);
		
	 imageLabeln17s = new JLabel();
		imageLabeln17s.setIcon(ls1);
		
		 imageLabeln57 = new JLabel();
		imageLabeln57.setIcon(ls1);
		
		 imageLabeln1012 = new JLabel();
		imageLabeln1012.setIcon(ls1);
		
		imageLabeln1517 = new JLabel();
		imageLabeln1517.setIcon(ls1);
		
		
		ImageIcon red = new ImageIcon(this.getClass().getResource(
		"ls2.png"));
		
		 imageLabelsn2 = new JLabel();
		imageLabelsn2.setIcon(red);
		
		 imageLabeln52 = new JLabel();
		imageLabeln52.setIcon(red);
		
		 imageLabeln710 = new JLabel();
		imageLabeln710.setIcon(red);
		
		 imageLabeln1512 = new JLabel();
		imageLabeln1512.setIcon(red);
		
		 imageLabeln41 = new JLabel();
		imageLabeln41.setIcon(red);
		
		 imageLabeln69 = new JLabel();
		imageLabeln69.setIcon(red);
		
		 imageLabeln1114 = new JLabel();
		imageLabeln1114.setIcon(red);
		
		 imageLabeln16s = new JLabel();
		imageLabeln16s.setIcon(red);
		
		 imageLabeln47 = new JLabel();
		imageLabeln47.setIcon(red);
		
		 imageLabeln912 = new JLabel();
		imageLabeln912.setIcon(red);
		
		 imageLabeln1417 = new JLabel();
		imageLabeln1417.setIcon(red);
		
		 imageLabeln36 = new JLabel();
		imageLabeln36.setIcon(red);
		
		 imageLabeln811 = new JLabel();
		imageLabeln811.setIcon(red);
		
		 imageLabeln1316 = new JLabel();
		imageLabeln1316.setIcon(red);
		
		
		l0 = new JLabel("Source");
		l1 = new JLabel("node1");
		l2 = new JLabel("node2");
		l3 = new JLabel("node3");
		l4 = new JLabel("node4");
		l5 = new JLabel("node5");
		l6 = new JLabel("node6");
		l7 = new JLabel("node7");
		l8 = new JLabel("node8");
		l9 = new JLabel("node9");
		l10 = new JLabel("node10");
		l11 = new JLabel("node11");
		l12 = new JLabel("node12");
		l13 = new JLabel("node13");
		l14 = new JLabel("node14");
		l15 = new JLabel("node15");
		l16 = new JLabel("node16");
		l17 = new JLabel("node17");
		l18 = new JLabel("Sink");
		
		
		
		imageLabel.setIcon(ii);
		imageLabel1.setIcon(ii);
		imageLabel2.setIcon(ii);
		imageLabel3.setIcon(ii);
		imageLabel4.setIcon(ii);
		imageLabel5.setIcon(ii);
		imageLabel6.setIcon(ii);
		imageLabel7.setIcon(ii);
		imageLabel8.setIcon(ii);
		imageLabel9.setIcon(ii);
		imageLabel10.setIcon(ii);
		imageLabel11.setIcon(ii);
		imageLabel12.setIcon(ii);
		imageLabel13.setIcon(ii);
		imageLabel14.setIcon(ii);
		imageLabel15.setIcon(ii);
		imageLabel16.setIcon(ii);
		imageLabel17.setIcon(ii);
		imageLabel18.setIcon(ii);		
		
		
		// centre row	
		
		
		JLabel a=new JLabel("Attacker");
		JLabel v=new JLabel("Valid Node");
		
		
		ImageIcon attack = new ImageIcon(this.getClass().getResource(
		"NodeRed.png"));
		attacker.setIcon(attack);
		attacker.setBounds(950, 500, 50, 100);
		a.setBounds(1020, 500, 50, 100);
		
		
		
		ImageIcon vn = new ImageIcon(this.getClass().getResource(
		"greenNode.png"));
		validn.setIcon(vn);
		validn.setBounds(950, 570, 50, 100);
		
		v.setBounds(1020, 570, 150, 100);
		
		
		refresh.setBounds(250, 730, 100, 50);
		refresh.setFont(f2);
		
		viewmacs.setBounds(400, 730, 200, 50);
		viewmacs.setFont(f2);
		
		
		imageLabel.setBounds(20, 300, 50, 100);
		l0.setBounds(25,333, 100, 35);
		l0.setForeground(Color.white);
		
		imageLabel1.setBounds(250, 300, 50, 100);
		l4.setBounds(260,365, 100, 35);
		l4.setForeground(Color.white);
		
		imageLabel2.setBounds(500, 300, 50, 100);
		l9.setBounds(510,370, 100, 35);
		l9.setForeground(Color.white);
		
		imageLabel3.setBounds(720, 300, 50, 100);
		l14.setBounds(730,370, 100, 35);
		l14.setForeground(Color.white);
		
		
		
		imageLabel4.setBounds(930, 300, 50, 100);
		l18.setBounds(950,370, 100, 35);
		l18.setForeground(Color.white);
		
		//second row		
		imageLabel5.setBounds(135, 150, 50, 100);
		l1.setBounds(140,220, 100, 35);
		l1.setForeground(Color.white);
		imageLabel6.setBounds(375, 150, 50, 100);
		l6.setBounds(385,220, 100, 35);
		l6.setForeground(Color.white);
		
		imageLabel7.setBounds(610, 150, 50, 100);
		l11.setBounds(620,220, 100, 35);
		l11.setForeground(Color.white);
		
		imageLabel8.setBounds(810, 150, 50, 100);
		l16.setBounds(830,220, 100, 35);
		l16.setForeground(Color.white);
		
		//first row
		imageLabel9.setBounds(255, 25, 50, 100);
		l3.setBounds(260,90, 100, 35);
		l3.setForeground(Color.white);
		
		imageLabel10.setBounds(492, 25, 50, 100);
		l8.setBounds(505,90, 100, 35);
		l8.setForeground(Color.white);
		imageLabel11.setBounds(710, 25, 50, 100);
		l13.setBounds(720,95, 100, 35);
		l13.setForeground(Color.white);
		
		
		//4th row
		imageLabel12.setBounds(135, 450, 50, 100);
		l2.setBounds(140,520, 100, 35);
		l2.setForeground(Color.white);
		
		imageLabel13.setBounds(375, 450, 50, 100);
		l7.setBounds(385,520, 100, 35);
		l7.setForeground(Color.white);
		imageLabel14.setBounds(610, 450, 50, 100);
		l12.setBounds(620,520, 100, 35);
		l12.setForeground(Color.white);
		
		imageLabel15.setBounds(810,450, 50, 100);
		l17.setBounds(830,520, 100, 35);
		l17.setForeground(Color.white);
		
	
		
		//last row
		imageLabel16.setBounds(255, 600, 50, 100);
		l5.setBounds(260,665, 100, 35);
		l5.setForeground(Color.white);
		
		imageLabel17.setBounds(492, 600, 50, 100);
		l10.setBounds(510,670, 100, 35);
		l10.setForeground(Color.white);
		
		
		imageLabel18.setBounds(710, 600, 50, 100);
		l15.setBounds(730,670, 100, 35);
		l15.setForeground(Color.white);
		
		//lines
		
		imageLabels1.setBounds(45, 79,100, 250);
		imageLabel46.setBounds(270, 79, 120, 250);
		imageLabel911.setBounds(520, 79, 120, 250);
		imageLabel1416.setBounds(730,79,120,250);
		imageLabeln13.setBounds(140, -25, 120, 250);
		imageLabeln68.setBounds(375, -32, 120, 250);
		imageLabeln1113.setBounds(617, -32, 120, 250);
		imageLabeln24.setBounds(140, 250, 120, 250);
		imageLabeln79.setBounds(384, 250, 120, 250);
		imageLabeln1214.setBounds(610, 250, 120, 250);
		imageLabeln17s.setBounds(820, 250, 120, 250);
		imageLabeln57.setBounds(265, 405, 120, 250);
		imageLabeln1012.setBounds(505, 405, 120, 250);
		imageLabeln1517.setBounds(715, 405, 120, 250);
		imageLabeln52.setBounds(90, 520, 200, 138);
		imageLabeln710.setBounds(320, 520, 200, 138);
		imageLabeln1512.setBounds(555, 520, 200, 138);
		imageLabeln41.setBounds(80, 220, 200, 138);
		imageLabeln69.setBounds(320, 210, 200, 138);
		imageLabeln1114.setBounds(550, 210, 200, 138);
		imageLabeln16s.setBounds(750, 210, 200, 138);	
		imageLabelsn2.setBounds(-50, 342, 200, 138);
		imageLabeln47.setBounds(185, 347, 200, 138);
		imageLabeln912.setBounds(425, 347, 200, 138);
		imageLabeln1417.setBounds(655, 350, 190, 155);
		
		imageLabeln36.setBounds(220, 70, 175, 155);
		imageLabeln811.setBounds(450, 70, 175, 155);
		imageLabeln1316.setBounds(650, 70, 175, 155);
		
		
		c.add(refresh);
		c.add(l0);
		c.add(l1);
		c.add(l2);
		c.add(l3);
		c.add(l4);
		c.add(l5);
		c.add(l6);
		c.add(l7);
		c.add(l8);
		c.add(l9);
		c.add(l10);
		c.add(l11);
		c.add(l12);
		c.add(l13);
		c.add(l14);
		c.add(l15);
		c.add(l16);
		c.add(l17);
		c.add(l18);
		
		c.add(a);
		c.add(v);
		
		
		c.add(imageLabel);//sorce
		c.add(imageLabel1);//node4
		c.add(imageLabel2);//node9
		c.add(imageLabel3);//node14
      	c.add(imageLabel4);//sink
		c.add(imageLabel5); //node1
		c.add(imageLabel6); //node6
		c.add(imageLabel7); //node11
		c.add(imageLabel8); //node16
		c.add(imageLabel9); //node3
		c.add(imageLabel10); //node8
		c.add(imageLabel11); //node13
		c.add(imageLabel12); //node2
		c.add(imageLabel13); //node7
		c.add(imageLabel14); //node12
		c.add(imageLabel15); //node17
		c.add(imageLabel16); //node5
		c.add(imageLabel17); //node10
		c.add(imageLabel18); //node15
		
		c.add(imageLabels1);
		c.add(imageLabel46);
		c.add(imageLabel911);
		c.add(imageLabel1416);
		c.add(imageLabeln13);
		c.add(imageLabeln68);
		c.add(imageLabeln1113);
		c.add(imageLabeln24);
		c.add(imageLabeln79);
		c.add(imageLabeln1214);
		c.add(imageLabeln17s);
		c.add(imageLabeln57);
		c.add(imageLabeln1012);
		c.add(imageLabeln1517);
		c.add(imageLabelsn2);
		c.add(imageLabeln52);
		c.add(imageLabeln710);
		c.add(imageLabeln1512);
		c.add(imageLabeln41);
		c.add(imageLabeln69);
		c.add(imageLabeln1114);
		c.add(imageLabeln16s);
		c.add(imageLabeln47);
		c.add(imageLabeln912);
		c.add(imageLabeln1417);
		c.add(imageLabeln36);
		c.add(imageLabeln811);
		c.add(imageLabeln1316);
		
		c.add(attacker);
		c.add(validn);
		c.add(viewmacs);
		jf.setBounds(5, 5, 1200, 830);
		jf.show();
		
		refresh.addActionListener(this);
		viewmacs.addActionListener(this);
		
		Socket client = null;
		int[] ports = new int[] { 2000,2001,2002,2003 };

		for (int i = 0; i < 4; i++) {
			Thread t = new Thread(new PortListener(ports[i]));
			t.setName("Listener-" + ports[i]);
			t.start();
		}
		
		
	}
	
	
	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource()==refresh)
		{
			
			ImageIcon ls1 = new ImageIcon(this.getClass().getResource(
					"ls01.png"));
					imageLabels1.setIcon(ls1);
					
					 
					imageLabel46.setIcon(ls1);
					
					 
					imageLabel911.setIcon(ls1);
					
					
					imageLabel1416.setIcon(ls1);
					
					
					 
					imageLabeln13.setIcon(ls1);
					
					 
					imageLabeln68.setIcon(ls1);
					
					 
					imageLabeln1113.setIcon(ls1);
					
					
					imageLabeln24.setIcon(ls1);
					
					 
					imageLabeln79.setIcon(ls1);
					
					 
					imageLabeln1214.setIcon(ls1);
					
				 
					imageLabeln17s.setIcon(ls1);
					
					 
					imageLabeln57.setIcon(ls1);
					
					
					imageLabeln1012.setIcon(ls1);
					
					
					imageLabeln1517.setIcon(ls1);
					
					
					ImageIcon red = new ImageIcon(this.getClass().getResource(
					"ls2.png"));
					
					 
					imageLabelsn2.setIcon(red);
					
					
					imageLabeln52.setIcon(red);
					
					
					imageLabeln710.setIcon(red);
					
					
					imageLabeln1512.setIcon(red);
					
					 
					imageLabeln41.setIcon(red);
					
					
					imageLabeln69.setIcon(red);
					
					 
					imageLabeln1114.setIcon(red);
					
					
					imageLabeln16s.setIcon(red);
					
					 
					imageLabeln47.setIcon(red);
					
					
					imageLabeln912.setIcon(red);
					
					
					imageLabeln1417.setIcon(red);
					
					 
					imageLabeln36.setIcon(red);
					
					 
					imageLabeln811.setIcon(red);
					
					 
					imageLabeln1316.setIcon(red);
			
			
					ImageIcon ii = new ImageIcon(this.getClass().getResource(
							"Node.jpg"));

					imageLabel.setIcon(ii);
					imageLabel1.setIcon(ii);
					imageLabel2.setIcon(ii);
					imageLabel3.setIcon(ii);
					imageLabel4.setIcon(ii);
					imageLabel5.setIcon(ii);
					imageLabel6.setIcon(ii);
					imageLabel7.setIcon(ii);
					imageLabel8.setIcon(ii);
					imageLabel9.setIcon(ii);
					imageLabel10.setIcon(ii);
					imageLabel11.setIcon(ii);
					imageLabel12.setIcon(ii);
					imageLabel13.setIcon(ii);
					imageLabel14.setIcon(ii);
					imageLabel15.setIcon(ii);
					imageLabel16.setIcon(ii);
					imageLabel17.setIcon(ii);
					imageLabel18.setIcon(ii);	
			
			
			
		}
		
		
		if(e.getSource()==viewmacs)
		{
			
			ViewMACs vm=new ViewMACs();
			vm.setSize(500,500);
			vm.setVisible(true);
			
		}
		
		
	}
	
	
	
	class PortListener implements Runnable {
		
		BufferedOutputStream bos = null;

		ServerSocket server;
		DataInputStream di;
		Socket s1;
		BufferedReader br = null;
		int port;

		public PortListener(int port) {
			this.port = port;
		}

		@Override
		public void run() {
			
			if(this.port==2000)
			{
				System.out.println("hello in 2000");
				
				try {
					
					server=new ServerSocket(2000);
				while(true)
					{
					System.out.println("hello inside");
					s1 = server.accept();
					System.out.println(s1);
					di = new DataInputStream(s1.getInputStream());
					String mac = di.readUTF();
					String file=di.readUTF();
					
					System.out.println(mac);
					System.out.println(file);
					Dbcon db = new Dbcon();
					Connection con = db.getConnection();
					System.out.println("going");
				try{	
					for(int i=1;i<=18;i++)
					{
						System.out.println("came in");
						String nn = "n"+i;
						String sql = "update router  set filename='"+file+"', mac='"+mac+"', message='no',attacker='no' where nodeName='"+nn+"'";
						Statement stmt = con.createStatement();
						stmt.executeUpdate(sql);
						System.out.println("inserted");
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
					}	
					
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
			}

			if(this.port==2001){
				
				try{
					server = new ServerSocket(2001);
				
				while(true){
					
					s1 = server.accept();
					JOptionPane.showConfirmDialog(jf, "Do you want to connect to Router");
					
					DataInputStream in = new DataInputStream(s1
							.getInputStream());
                    
					String file = in.readUTF();
					String data = in.readUTF();
					String mac = in.readUTF();
					String receiver = in.readUTF();
					
					
					Dbcon db = new Dbcon();
					Connection con = db.getConnection();
					Statement stmt = con.createStatement();
					
					timer.start();
					Thread.sleep(1000);
					
					ImageIcon ii = new ImageIcon(this.getClass().getResource(
					"greenNode.png"));
					imageLabel.setIcon(ii);
					imageLabel.setBounds(20, 300, 50, 100);
					
					ImageIcon ii1 = new ImageIcon(this.getClass().getResource(
							"NodeRed.png"));
					
					Random ram = new Random();
					int l1 = ram.nextInt(20);
					int l2 = ram.nextInt(20);
					System.out.println(l1);
					System.out.println(l2);
					if(l1<l2)
					{
						
						ImageIcon green1 = new ImageIcon(this.getClass().getResource("green1.png"));
						ImageIcon green2 = new ImageIcon(this.getClass().getResource("green2.png"));
						
						
						Thread.sleep(1000);
						imageLabels1.setIcon(green1);
						imageLabels1.setBounds(45, 79,100, 250);
							imageLabel5.setIcon(ii);
								imageLabel5.setBounds(135, 150, 50, 100);
						String sql = "select * from router where nodename='n1'";
						ResultSet rs1 = stmt.executeQuery(sql);
						while(rs1.next()==true)
						{
							String h1 = rs1.getString(3);
							if(h1.equals(mac))
							{
								//JOptionPane.showMessageDialog(null,"No False Injected data in node 1");
							}
							else
							{
								imageLabel5.setIcon(ii1);
								imageLabel5.setBounds(135, 150, 50, 100);
								JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
							       
							}
							
						}
								
						
					     int l13 = ram.nextInt(20);
							int l14 = ram.nextInt(20);
					     if(l13<l14)
					     {
					    	 
					    	 Thread.sleep(1000);
					    	 imageLabeln13.setIcon(green1);
					    	 imageLabeln13.setBounds(140, -25, 120, 250);
					    	 
					    	 imageLabel9.setIcon(ii);
					    	 imageLabel9.setBounds(255, 25, 50, 100);
					    	 
					    	 String sql3 = "select * from router where nodename='n3'";
								ResultSet rs3 = stmt.executeQuery(sql3);
								while(rs3.next()==true)
								{
									String h1 = rs3.getString(3);
									if(h1.equals(mac))
									{
										//JOptionPane.showMessageDialog(null,"No False Injected data in node 3");
									}
									else
									{
										imageLabel9.setIcon(ii1);
										imageLabel9.setBounds(135, 150, 50, 100);
										JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
									       
									}
									
								}
								
								
								Thread.sleep(1000);
								
								imageLabeln36.setIcon(green2);
								imageLabeln36.setBounds(220, 70, 175, 155);
								
								imageLabel6.setIcon(ii);
								imageLabel6.setBounds(375, 150, 50, 100);
								
								String sql6 = "select * from router where nodename='n6'";
								ResultSet rs6 = stmt.executeQuery(sql6);
								while(rs6.next()==true)
								{
									String h1 = rs6.getString(3);
									if(h1.equals(mac))
									{
										//JOptionPane.showMessageDialog(null,"No False Injected data in node 6");
									}
									else
									{
										imageLabel6.setIcon(ii1);
										imageLabel6.setBounds(135, 150, 50, 100);
										JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
									       
									}
									
								}
								
								
								int l68 = ram.nextInt(20);
								int l69 = ram.nextInt(20);
								
								if(l68<l69)
								{
									
									Thread.sleep(1000);
									imageLabeln68.setIcon(green1);
									imageLabeln68.setBounds(375, -32, 120, 250);
									
									imageLabel10.setIcon(ii);
									imageLabel10.setBounds(492, 25, 50, 100);
									
									String sql8 = "select * from router where nodename='n8'";
									ResultSet rs8 = stmt.executeQuery(sql8);
									while(rs8.next()==true)
									{
										String h1 = rs8.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 8");
										}
										else
										{
											imageLabel10.setIcon(ii1);
											imageLabel10.setBounds(135, 150, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
										
									}
									
									
									
									Thread.sleep(1000);
									imageLabeln811.setIcon(green2);
									imageLabeln811.setBounds(450, 70, 175, 155);
									
									imageLabel7.setIcon(ii);
									imageLabel7.setBounds(610, 150, 50, 100);
									
									String sql11 = "select * from router where nodename='n11'";
									ResultSet rs11 = stmt.executeQuery(sql11);
									Statement st1=con.createStatement();
									
									while(rs11.next()==true)
									{
										String h1 = rs11.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
										}
										else
										{
											imageLabel7.setIcon(ii1);
											imageLabel7.setBounds(610, 150, 50, 100);
										int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
										  
										if(opt==0)
										{
											String sqlf = "Update router set mac='"+mac+"'";
										st1.executeUpdate(sqlf);
											JOptionPane.showMessageDialog(null, "Injected Data Filtered");
											imageLabel7.setIcon(ii);
											imageLabel7.setBounds(610, 150, 50, 100);
										}
										else if(opt==1)
										{
											data = data +injdata;
										}
										
										
										}
										
									}
									
									int l1113 = ram.nextInt(20);
									int l1114 = ram.nextInt(20);
									
									if(l1113<l1114)
									{
										
										Thread.sleep(2000);
										
										imageLabeln1113.setIcon(green1);
										imageLabeln1113.setBounds(617, -32, 120, 250);
										
										imageLabel11.setIcon(ii);
										imageLabel11.setBounds(710, 25, 50, 100);
										
										String sql13 = "select * from router where nodename='n13'";
										ResultSet rs13 = stmt.executeQuery(sql13);
										while(rs13.next()==true)
										{
											String h1 = rs13.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
											}
											else
											{
												imageLabel11.setIcon(ii1);
												imageLabel11.setBounds(135, 150, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										
										
										Thread.sleep(1000);
										imageLabeln1316.setIcon(green2);
										imageLabeln1316.setBounds(650, 70, 175, 155);
										
										imageLabel8.setIcon(ii);
										imageLabel8.setBounds(810, 150, 50, 100);
										
										String sql16 = "select * from router where nodename='n16'";
										ResultSet rs16 = stmt.executeQuery(sql16);
										while(rs16.next()==true)
										{
											String h1 = rs16.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
											}
											else
											{
												imageLabel8.setIcon(ii1);
												imageLabel8.setBounds(810, 150, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										
										
										Thread.sleep(2000);
										
										imageLabeln16s.setIcon(green2);
										imageLabeln16s.setBounds(750, 210, 200, 138);
										
										imageLabel4.setIcon(ii);
										imageLabel4.setBounds(930, 300, 50, 100);
										String sql18 = "select * from router where nodename='n18'";
										ResultSet rs18 = stmt.executeQuery(sql18);
										while(rs18.next()==true)
										{
											String h1 = rs18.getString(3);
											String mac1;
											
											System.out.println(h1);
											
											PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
											pout.print(data);
											pout.close();
											
												   MessageDigest md = MessageDigest.getInstance("SHA1");
												   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
												   DigestInputStream dis2 = new DigestInputStream(in1, md);
												   BufferedInputStream bd = new BufferedInputStream(dis2);
												   
												   while (true) {
														int b2 = bd.read();
														if (b2 == -1)
															break;
													}
										 
													BigInteger bi2 = new BigInteger(md.digest());
													mac1 = bi2.toString(16);
													System.out.println(mac1);
											
											
											
													if(h1.equals(mac1))
													{
														JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
														if(receiver.equals("A"))
														{
															Socket s = new Socket("localhost",100);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF("NO False Injected Data In the Data");
															
															
														}
														else if(receiver.equals("B"))
														{
															Socket s = new Socket("localhost",101);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF("NO False Injected Data In the Data");
															
														}
													}
													else
													{
														imageLabel4.setIcon(ii1);
														imageLabel4.setBounds(930, 300, 50, 100);
														if(receiver.equals("A"))
														{
															Socket s = new Socket("localhost",100);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF(" False Injected Data is"+" : "+injdata);
															
															
														}
														else if(receiver.equals("B"))
														{
															Socket s = new Socket("localhost",101);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF(" False Injected Data is"+" : "+injdata);
															
														}
													       
													}
											
										}
										
										
									}
									else if(l1113>l1114)
									{
										
										
										Thread.sleep(2000);
										imageLabeln1114.setIcon(green2);
										imageLabeln1114.setBounds(550, 210, 200, 138);
										
										imageLabel3.setIcon(ii);
										imageLabel3.setBounds(720, 300, 50, 100);
										
										String sql14 = "select * from router where nodename='n14'";
										ResultSet rs14 = stmt.executeQuery(sql14);
										while(rs14.next()==true)
										{
											String h1 = rs14.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
											}
											else
											{
												imageLabel3.setIcon(ii1);
												imageLabel3.setBounds(720, 300, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										
										int l1416 = ram.nextInt(20);
										int l1417 = ram.nextInt(20);
										
										if(l1416<l1417)
										{
										
											
											Thread.sleep(2000);
										imageLabel1416.setIcon(green1);
										imageLabel1416.setBounds(730,79,120,250);
										
										imageLabel8.setIcon(ii);
										imageLabel8.setBounds(810, 150, 50, 100);
										
										String sql16 = "select * from router where nodename='n16'";
										ResultSet rs16 = stmt.executeQuery(sql16);
										while(rs16.next()==true)
										{
											String h1 = rs16.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
											}
											else
											{
												imageLabel8.setIcon(ii1);
												imageLabel8.setBounds(810, 150, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										
										
										Thread.sleep(2000);
										
										imageLabeln16s.setIcon(green2);
										imageLabeln16s.setBounds(750, 210, 200, 138);
										
										imageLabel4.setIcon(ii);
										imageLabel4.setBounds(930, 300, 50, 100);
										String sql18 = "select * from router where nodename='n18'";
										ResultSet rs18 = stmt.executeQuery(sql18);
										while(rs18.next()==true)
										{
											String h1 = rs18.getString(3);
											String mac1 = "";
											
											PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
											pout.write(data.getBytes());
											pout.close();
											
												   MessageDigest md = MessageDigest.getInstance("SHA1");
												   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
												   DigestInputStream dis2 = new DigestInputStream(in1, md);
												   BufferedInputStream bd = new BufferedInputStream(dis2);
												   
												   while (true) {
														int b2 = bd.read();
														if (b2 == -1)
															break;
													}
										 
													BigInteger bi2 = new BigInteger(md.digest());
													mac1 = bi2.toString(16);
													System.out.println(mac1);
											
											
											
											if(h1.equals(mac1))
											{
												JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
												if(receiver.equals("A"))
												{
													Socket s = new Socket("localhost",100);
													DataOutputStream d = new DataOutputStream(s.getOutputStream());
													d.writeUTF(data);
													d.writeUTF("NO False Injected Data In the Data");
													
													
												}
												else if(receiver.equals("B"))
												{
													Socket s = new Socket("localhost",101);
													DataOutputStream d = new DataOutputStream(s.getOutputStream());
													d.writeUTF(data);
													d.writeUTF("NO False Injected Data In the Data");
													
												}
											}
											else
											{
												imageLabel4.setIcon(ii1);
												imageLabel4.setBounds(930, 300, 50, 100);
												if(receiver.equals("A"))
												{
													Socket s = new Socket("localhost",100);
													DataOutputStream d = new DataOutputStream(s.getOutputStream());
													d.writeUTF(data);
													d.writeUTF(" False Injected Data is"+" : "+injdata);
													
													
												}
												else if(receiver.equals("B"))
												{
													Socket s = new Socket("localhost",101);
													DataOutputStream d = new DataOutputStream(s.getOutputStream());
													d.writeUTF(data);
													d.writeUTF(" False Injected Data is"+" : "+injdata);
													
												}
											       
											}
											
										}
										}
										
										else if(l1416>l1417)
										{
											
											Thread.sleep(2000);
											imageLabeln1417.setIcon(green2);
											imageLabeln1417.setBounds(655, 350, 190, 155);
											
											imageLabel15.setIcon(ii);
											imageLabel15.setBounds(810,450, 50, 100);
											String sql17 = "select * from router where nodename='n17'";
											ResultSet rs17 = stmt.executeQuery(sql17);
											while(rs17.next()==true)
											{
												String h1 = rs17.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
												}
												else
												{
													imageLabel15.setIcon(ii1);
													imageLabel15.setBounds(810,450, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											
											Thread.sleep(2000);
											imageLabeln17s.setIcon(green1);
											imageLabeln17s.setBounds(820, 250, 120, 250);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
										}
									
									}
									
								}
								
								else if(l68>l69)
								{
									
									Thread.sleep(2000);
									imageLabeln69.setIcon(green2);
									imageLabeln69.setBounds(320, 210, 200, 138);
									
									imageLabel2.setIcon(ii);
									imageLabel2.setBounds(500, 300, 50, 100);
									
									
									String sql9 = "select * from router where nodename='n9'";
									ResultSet rs9 = stmt.executeQuery(sql9);
									while(rs9.next()==true)
									{
										String h1 = rs9.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 9");
										}
										else
										{
											imageLabel2.setIcon(ii1);
											imageLabel2.setBounds(500, 300, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
								
									
									}
									
									int l911 = ram.nextInt(20);
									int l912 = ram.nextInt(20);
									
									if(l911<l912)
									{
										
										Thread.sleep(2000);
										imageLabel911.setIcon(green1);
										imageLabel911.setBounds(520, 79, 120, 250);
										
										imageLabel7.setIcon(ii);
										imageLabel7.setBounds(610, 150, 50, 100);
										
										
										String sql11 = "select * from router where nodename='n11'";
										ResultSet rs11 = stmt.executeQuery(sql11);
										Statement st1=con.createStatement();
										while(rs11.next()==true)
										{
											String h1 = rs11.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
											}
											else
											{
												imageLabel7.setIcon(ii1);
												imageLabel7.setBounds(610, 150, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Injected Data Filtered");
													imageLabel7.setIcon(ii);
													imageLabel7.setBounds(610, 150, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
									
										
										}
										
										int l1113 = ram.nextInt(20);
										int l1114 = ram.nextInt(20);
										
										if(l1113<l1114)
										{
                                             
											
											Thread.sleep(2000);
											imageLabeln1113.setIcon(green1);
											imageLabeln1113.setBounds(617, -32, 120, 250);
											
											imageLabel11.setIcon(ii);
											imageLabel11.setBounds(710, 25, 50, 100);
											
											String sql13 = "select * from router where nodename='n13'";
											ResultSet rs13 = stmt.executeQuery(sql13);
											while(rs13.next()==true)
											{
												String h1 = rs13.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
												}
												else
												{
													imageLabel11.setIcon(ii1);
													imageLabel11.setBounds(135, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											
											Thread.sleep(2000);
											imageLabeln1316.setIcon(green2);
											imageLabeln1316.setBounds(650, 70, 175, 155);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											
											Thread.sleep(2000);
											
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
											
											
										}
										else if(l1113>l1114)
										{
											
											Thread.sleep(2000);
											imageLabeln1114.setIcon(green2);
											imageLabeln1114.setBounds(550, 210, 200, 138);
											
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
												
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
										
										}
										
										
										
									}
									else if(l911>l912)
									{
										
										Thread.sleep(2000);
										imageLabeln912.setIcon(green2);
										imageLabeln912.setBounds(425, 347, 200, 138);
										
										imageLabel14.setIcon(ii);
										imageLabel14.setBounds(610, 450, 50, 100);
										
										
										String sql12 = "select * from router where nodename='n12'";
										ResultSet rs12 = stmt.executeQuery(sql12);
										Statement st1=con.createStatement();
										
										while(rs12.next()==true)
										{
											String h1 = rs12.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
											}
											else
											{
												imageLabel14.setIcon(ii1);
												imageLabel14.setBounds(610, 450, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "Evasdropper Found Do you want to  Protect the Data ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Data Protected From Evasdropper ");
													imageLabel14.setIcon(ii);
													imageLabel14.setBounds(610, 450, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
									
										}
										
										int l1214 = ram.nextInt(20);
										int l1215 = ram.nextInt(20);
										
										if(l1214<l1215)
										{
											
											Thread.sleep(2000);
											imageLabeln1214.setIcon(green1);
											imageLabeln1214.setBounds(610, 250, 120, 250);
										
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
											
												
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
											
											
										}
										else if(l1214>l1215)
										{
											Thread.sleep(2000);
											imageLabeln1512.setIcon(green2);
											imageLabeln1512.setBounds(555, 520, 200, 138);
											
											imageLabel18.setIcon(ii);
											imageLabel18.setBounds(710, 600, 50, 100);
											String sql15 = "select * from router where nodename='n15'";
											ResultSet rs15 = stmt.executeQuery(sql15);
											while(rs15.next()==true)
											{
												String h1 = rs15.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
												}
												else
												{
													imageLabel18.setIcon(ii);
													imageLabel18.setBounds(710, 600, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											Thread.sleep(2000);
											imageLabeln1517.setIcon(green1);
											imageLabeln1517.setBounds(715, 405, 120, 250);
											
											imageLabel15.setIcon(ii);
											imageLabel15.setBounds(810,450, 50, 100);
											
											String sql17 = "select * from router where nodename='n17'";
											ResultSet rs17 = stmt.executeQuery(sql17);
											while(rs17.next()==true)
											{
												String h1 = rs17.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
												}
												else
												{
													imageLabel15.setIcon(ii1);
													imageLabel15.setBounds(810,450, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											Thread.sleep(2000);
											imageLabeln17s.setIcon(green1);
											imageLabeln17s.setBounds(820, 250, 120, 250);
											
										    imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
										}
										
										
										
									}
									
									
									
								}
								
					    	 
					    	 
					     }
					     else if(l13>l14)
					     {
					    	 Thread.sleep(2000);
					    	 imageLabeln41.setIcon(green2);
					    	 imageLabeln41.setBounds(80, 220, 200, 138);
					    	 
					    	 imageLabel1.setIcon(ii);
					    	 imageLabel1.setBounds(250, 300, 50, 100);
					    	 

								String sql4 = "select * from router where nodename='n4'";
								ResultSet rs4= stmt.executeQuery(sql4);
								while(rs4.next()==true)
								{
									String h1 = rs4.getString(3);
									if(h1.equals(mac))
									{
										//JOptionPane.showMessageDialog(null,"No False Injected data in node 4");
									}
									else
									{
										imageLabel1.setIcon(ii1);
										imageLabel1.setBounds(610, 450, 50, 100);
										JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
									       
									}
							
								
								}
								
								int l46 = ram.nextInt(20);
								int l47 = ram.nextInt(20);
								
								if(l46<l47)
								{Thread.sleep(2000);
									imageLabel46.setIcon(green1);
									imageLabel46.setBounds(270, 79, 120, 250);
									
									imageLabel6.setIcon(ii);
									imageLabel6.setBounds(375, 150, 50, 100);
									
									String sql6 = "select * from router where nodename='n6'";
									ResultSet rs6= stmt.executeQuery(sql6);
									while(rs6.next()==true)
									{
										String h1 = rs6.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 6");
										}
										else
										{
											imageLabel6.setIcon(ii1);
											imageLabel6.setBounds(610, 450, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
								
									
									}
									

									int l68 = ram.nextInt(20);
									int l69 = ram.nextInt(20);
									
									if(l68<l69)
									{
										Thread.sleep(2000);
										imageLabeln68.setIcon(green1);
										imageLabeln68.setBounds(375, -32, 120, 250);
										
										imageLabel10.setIcon(ii);
										imageLabel10.setBounds(492, 25, 50, 100);
										
										String sql8 = "select * from router where nodename='n8'";
										ResultSet rs8 = stmt.executeQuery(sql8);
										while(rs8.next()==true)
										{
											String h1 = rs8.getString(3);
											if(h1.equals(mac))
											{
												JOptionPane.showMessageDialog(null,"No False Injected data in node 8");
											}
											else
											{
												imageLabel10.setIcon(ii1);
												imageLabel10.setBounds(135, 150, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										Thread.sleep(2000);
										imageLabeln811.setIcon(green2);
										imageLabeln811.setBounds(450, 70, 175, 155);
										
										imageLabel7.setIcon(ii);
										imageLabel7.setBounds(610, 150, 50, 100);
										
										String sql11 = "select * from router where nodename='n11'";
										ResultSet rs11 = stmt.executeQuery(sql11);
										Statement st1=con.createStatement();
										while(rs11.next()==true)
										{
											String h1 = rs11.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
											}
											else
											{
												imageLabel7.setIcon(ii1);
												imageLabel7.setBounds(610, 150, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Injected Data Filtered");
													
													imageLabel7.setIcon(ii);
													imageLabel7.setBounds(610, 150, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
											
										}
										
										int l1113 = ram.nextInt(20);
										int l1114 = ram.nextInt(20);
										
										if(l1113<l1114)
										{
											Thread.sleep(2000);
											imageLabeln1113.setIcon(green1);
											imageLabeln1113.setBounds(617, -32, 120, 250);
											
											imageLabel11.setIcon(ii);
											imageLabel11.setBounds(710, 25, 50, 100);
											
											String sql13 = "select * from router where nodename='n13'";
											ResultSet rs13 = stmt.executeQuery(sql13);
											while(rs13.next()==true)
											{
												String h1 = rs13.getString(3);
												if(h1.equals(mac))
												{
													JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
												}
												else
												{
													imageLabel11.setIcon(ii1);
													imageLabel11.setBounds(135, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											Thread.sleep(2000);
											imageLabeln1316.setIcon(green2);
											imageLabeln1316.setBounds(650, 70, 175, 155);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
											
										}
										else if(l1113>l1114)
										{
										
											Thread.sleep(2000);
											imageLabeln1114.setIcon(green2);
											imageLabeln1114.setBounds(550, 210, 200, 138);
											
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
										
										}
										
									}
									
									else if(l68>l69)
									{
										Thread.sleep(2000);
										imageLabeln69.setIcon(green2);
										imageLabeln69.setBounds(320, 210, 200, 138);
										
										imageLabel2.setIcon(ii);
										imageLabel2.setBounds(500, 300, 50, 100);
										
										
										String sql9 = "select * from router where nodename='n9'";
										ResultSet rs9 = stmt.executeQuery(sql9);
										while(rs9.next()==true)
										{
											String h1 = rs9.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 9");
											}
											else
											{
												imageLabel2.setIcon(ii1);
												imageLabel2.setBounds(500, 300, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										
										int l911 = ram.nextInt(20);
										int l912 = ram.nextInt(20);
										
										if(l911<l912)
										{
											Thread.sleep(2000);
											imageLabel911.setIcon(green1);
											imageLabel911.setBounds(520, 79, 120, 250);
											
											imageLabel7.setIcon(ii);
											imageLabel7.setBounds(610, 150, 50, 100);
											
											
											String sql11 = "select * from router where nodename='n11'";
											ResultSet rs11 = stmt.executeQuery(sql11);
											Statement st1=con.createStatement();
											while(rs11.next()==true)
											{
												String h1 = rs11.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
												}
												else
												{
													imageLabel7.setIcon(ii1);
													imageLabel7.setBounds(610, 150, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"' where nodename='n11'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														
														imageLabel7.setIcon(ii);
														imageLabel7.setBounds(610, 150, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											
											}
											
											int l1113 = ram.nextInt(20);
											int l1114 = ram.nextInt(20);
											
											if(l1113<l1114)
											{
												Thread.sleep(2000);
												imageLabeln1113.setIcon(green1);
												imageLabeln1113.setBounds(617, -32, 120, 250);
												
												imageLabel11.setIcon(ii);
												imageLabel11.setBounds(710, 25, 50, 100);
												
												String sql13 = "select * from router where nodename='n13'";
												ResultSet rs13 = stmt.executeQuery(sql13);
												while(rs13.next()==true)
												{
													String h1 = rs13.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
													}
													else
													{
														imageLabel11.setIcon(ii1);
														imageLabel11.setBounds(135, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln1316.setIcon(green2);
												imageLabeln1316.setBounds(650, 70, 175, 155);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
												
											}
											else if(l1113>l1114)
											{
												
												
												
												Thread.sleep(2000);
												imageLabeln1114.setIcon(green2);
												imageLabeln1114.setBounds(550, 210, 200, 138);
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1);
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
											
											}
											
											
											
										}
										else if(l911>l912)
										{
											Thread.sleep(2000);
											imageLabeln912.setIcon(green2);
											imageLabeln912.setBounds(425, 347, 200, 138);
											
											imageLabel14.setIcon(ii);
											imageLabel14.setBounds(610, 450, 50, 100);
											
											
											String sql12 = "select * from router where nodename='n12'";
											ResultSet rs12 = stmt.executeQuery(sql12);
											Statement st1=con.createStatement();
											while(rs12.next()==true)
											{
												String h1 = rs12.getString(3);
												if(h1.equals(mac))
												{
													JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
												}
												else
												{
													imageLabel14.setIcon(ii1);
													imageLabel14.setBounds(610, 450, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														imageLabel14.setIcon(ii);
														imageLabel14.setBounds(610, 450, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											}
											
											int l1214 = ram.nextInt(20);
											int l1215 = ram.nextInt(20);
											
											if(l1214<l1215)
											{
												Thread.sleep(2000);
												imageLabeln1214.setIcon(green1);
												imageLabeln1214.setBounds(610, 250, 120, 250);
												
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
															//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1); ///here some problem
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
												
												
											}
											else if(l1214>l1215)
											{
												Thread.sleep(2000);
												imageLabeln1512.setIcon(green2);
												imageLabeln1512.setBounds(555, 520, 200, 138);
												
												imageLabel18.setIcon(ii);
												imageLabel18.setBounds(710, 600, 50, 100);
												String sql15 = "select * from router where nodename='n15'";
												ResultSet rs15 = stmt.executeQuery(sql15);
												while(rs15.next()==true)
												{
													String h1 = rs15.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
													}
													else
													{
														imageLabel18.setIcon(ii);
														imageLabel18.setBounds(710, 600, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												Thread.sleep(2000);
												imageLabeln1517.setIcon(green1);
												imageLabeln1517.setBounds(715, 405, 120, 250);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
											}
										}
									}
							
								}
								else if(l46>l47)
								{
									Thread.sleep(2000);
									imageLabeln47.setIcon(green2);
									imageLabeln47.setBounds(185, 347, 200, 138);
									
									imageLabel13.setIcon(ii);
									imageLabel13.setBounds(375, 450, 50, 100);
									
									String sql7 = "select * from router where nodename='n7'";
									ResultSet rs7 = stmt.executeQuery(sql7);
									while(rs7.next()==true)
									{
										String h1 = rs7.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 7");
										}
										else
										{
											imageLabel3.setIcon(ii1);
											imageLabel3.setBounds(610, 450, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
								
									
									}
									
									
									int l79 = ram.nextInt(20);
									int l710 = ram.nextInt(20);
									
									if(l79<l710)
									{
										Thread.sleep(2000);
										imageLabeln79.setIcon(green1);
										imageLabeln79.setBounds(384, 250, 120, 250);
										
										imageLabel2.setIcon(ii);
										imageLabel2.setBounds(500, 300, 50, 100);
										
										
										String sql9 = "select * from router where nodename='n9'";
										ResultSet rs9 = stmt.executeQuery(sql9);
										while(rs9.next()==true)
										{
											String h1 = rs9.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 9");
											}
											else
											{
												imageLabel2.setIcon(ii1);
												imageLabel2.setBounds(500, 300, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										
										int l911 = ram.nextInt(20);
										int l912 = ram.nextInt(20);
										
										if(l911<l912)
										{
											Thread.sleep(2000);
											imageLabel911.setIcon(green1);
											imageLabel911.setBounds(520, 79, 120, 250);
											
											imageLabel7.setIcon(ii);
											imageLabel7.setBounds(610, 150, 50, 100);
											
											
											String sql11 = "select * from router where nodename='n11'";
											ResultSet rs11 = stmt.executeQuery(sql11);
											Statement st1=con.createStatement();
											while(rs11.next()==true)
											{
												String h1 = rs11.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
												}
												else
												{
													imageLabel7.setIcon(ii1);
													imageLabel7.setBounds(610, 150, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"' where nodename='n11'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														imageLabel7.setIcon(ii);
														imageLabel7.setBounds(610, 150, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											
											}
											
											int l1113 = ram.nextInt(20);
											int l1114 = ram.nextInt(20);
											
											if(l1113<l1114)
											{
												Thread.sleep(2000);
												imageLabeln1113.setIcon(green1);
												imageLabeln1113.setBounds(617, -32, 120, 250);
												
												imageLabel11.setIcon(ii);
												imageLabel11.setBounds(710, 25, 50, 100);
												
												String sql13 = "select * from router where nodename='n13'";
												ResultSet rs13 = stmt.executeQuery(sql13);
												while(rs13.next()==true)
												{
													String h1 = rs13.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
													}
													else
													{
														imageLabel11.setIcon(ii1);
														imageLabel11.setBounds(135, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln1316.setIcon(green2);
												imageLabeln1316.setBounds(650, 70, 175, 155);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
												
												
											}
											else if(l1113>l1114)
											{
												
												
												
												Thread.sleep(2000);
												imageLabeln1114.setIcon(green2);
												imageLabeln1114.setBounds(550, 210, 200, 138);
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1= bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
															//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1);
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
											
											}
											
											
											
										}
										else if(l911>l912)
										{
											Thread.sleep(2000);
											imageLabeln912.setIcon(green2);
											imageLabeln912.setBounds(425, 347, 200, 138);
											
											imageLabel14.setIcon(ii);
											imageLabel14.setBounds(610, 450, 50, 100);
											
											
											String sql12 = "select * from router where nodename='n12'";
											ResultSet rs12 = stmt.executeQuery(sql12);
											Statement st1=con.createStatement();
											while(rs12.next()==true)
											{
												String h1 = rs12.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
												}
												else
												{
													imageLabel14.setIcon(ii1);
													imageLabel14.setBounds(610, 450, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														imageLabel14.setIcon(ii);
														imageLabel14.setBounds(610, 450, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											}
											
											int l1214 = ram.nextInt(20);
											int l1215 = ram.nextInt(20);
											
											if(l1214<l1215)
											{
												Thread.sleep(2000);
												imageLabeln1214.setIcon(green1);
												imageLabeln1214.setBounds(610, 250, 120, 250);
												
												
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
															//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1);
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
												
												
											}
											else if(l1214>l1215)
											{
												Thread.sleep(2000);
												imageLabeln1512.setIcon(green2);
												imageLabeln1512.setBounds(555, 520, 200, 138);
												
												imageLabel18.setIcon(ii);
												imageLabel18.setBounds(710, 600, 50, 100);
												String sql15 = "select * from router where nodename='n15'";
												ResultSet rs15 = stmt.executeQuery(sql15);
												while(rs15.next()==true)
												{
													String h1 = rs15.getString(3);
													if(h1.equals(mac))
													{
														JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
													}
													else
													{
														imageLabel18.setIcon(ii);
														imageLabel18.setBounds(710, 600, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												
												Thread.sleep(2000);
												imageLabeln1517.setIcon(green1);
												imageLabeln1517.setBounds(715, 405, 120, 250);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
											}
											
											
											
										}
										
										
									}
									else if(l79>l710)
									{
										Thread.sleep(2000);
										imageLabeln710.setIcon(green2);
										imageLabeln710.setBounds(320, 520, 200, 138);
										
									imageLabel17.setIcon(ii);
										imageLabel17.setBounds(492, 600, 50, 100);
										
										String sql10 = "select * from router where nodename='n10'";
										ResultSet rs10 = stmt.executeQuery(sql10);
										while(rs10.next()==true)
										{
											String h1 = rs10.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 10");
											}
											else
											{
												imageLabel17.setIcon(ii1);
												imageLabel17.setBounds(492, 600, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										Thread.sleep(2000);
										imageLabeln1012.setIcon(green1);
										imageLabeln1012.setBounds(505, 405, 120, 250);


										
										imageLabel14.setIcon(ii);
										imageLabel14.setBounds(610, 450, 50, 100);
										
										
										String sql12 = "select * from router where nodename='n12'";
										ResultSet rs12 = stmt.executeQuery(sql12);
										Statement st1=con.createStatement();
										while(rs12.next()==true)
										{
											String h1 = rs12.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
											}
											else
											{
												imageLabel14.setIcon(ii1);
												imageLabel14.setBounds(610, 450, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Injected Data Filtered");
													imageLabel14.setIcon(ii);
													imageLabel14.setBounds(610, 450, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
									
										}
										
										int l1214 = ram.nextInt(20);
										int l1215 = ram.nextInt(20);
										
										if(l1214<l1215)
										{
											Thread.sleep(2000);
											imageLabeln1214.setIcon(green1);
											imageLabeln1214.setBounds(610, 250, 120, 250);
											
											
											
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
											
											
										}
										else if(l1214>l1215)
										{
											Thread.sleep(2000);
											imageLabeln1512.setIcon(green2);
											imageLabeln1512.setBounds(555, 520, 200, 138);
											
											imageLabel18.setIcon(ii);
											imageLabel18.setBounds(710, 600, 50, 100);
											String sql15 = "select * from router where nodename='n15'";
											ResultSet rs15 = stmt.executeQuery(sql15);
											while(rs15.next()==true)
											{
												String h1 = rs15.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
												}
												else
												{
													imageLabel18.setIcon(ii);
													imageLabel18.setBounds(710, 600, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											Thread.sleep(2000);
											imageLabeln1517.setIcon(green1);
											imageLabeln1517.setBounds(715, 405, 120, 250);
											
											imageLabel15.setIcon(ii);
											imageLabel15.setBounds(810,450, 50, 100);
											
											String sql17 = "select * from router where nodename='n17'";
											ResultSet rs17 = stmt.executeQuery(sql17);
											while(rs17.next()==true)
											{
												String h1 = rs17.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
												}
												else
												{
													imageLabel15.setIcon(ii1);
													imageLabel15.setBounds(810,450, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											
											Thread.sleep(2000);
											imageLabeln17s.setIcon(green1);
											imageLabeln17s.setBounds(820, 250, 120, 250);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
										}
										
										
										
									}
								
									
								}
							
					     }
					  
					}
					else if(l1>l2)
					{
						
						ImageIcon green2 = new ImageIcon(this.getClass().getResource("green2.png"));
						ImageIcon green1 = new ImageIcon(this.getClass().getResource("green1.png"));
						 
						Thread.sleep(2000);
						
						imageLabelsn2.setIcon(green2);
						 imageLabelsn2.setBounds(-50, 342, 200, 138);
						
						 imageLabel12.setIcon(ii);
						 imageLabel12.setBounds(135, 450, 50, 100);
						 
						 String sql2 = "select * from router where nodename='n2'";
							ResultSet rs2 = stmt.executeQuery(sql2);
							while(rs2.next()==true)
							{
								String h1 = rs2.getString(3);
								if(h1.equals(mac))
								{
									//JOptionPane.showMessageDialog(null,"No False Injected data in node 2");
								}
								else
								{
									imageLabel12.setIcon(ii1);
									imageLabel12.setBounds(610, 450, 50, 100);
									JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
								       
								}
						
							
							}
							
							int l24 = ram.nextInt(20);
							int l25 = ram.nextInt(20);
							
							if(l24<l25)
							{
								Thread.sleep(2000);
								imageLabeln24.setIcon(green1);
								imageLabeln24.setBounds(140, 250, 120, 250);
								
								imageLabel1.setIcon(ii);
								imageLabel1.setBounds(250, 300, 50, 100);
							
								String sql4 = "select * from router where nodename='n4'";
								ResultSet rs4= stmt.executeQuery(sql4);
								while(rs4.next()==true)
								{
									String h1 = rs4.getString(3);
									if(h1.equals(mac))
									{
										//JOptionPane.showMessageDialog(null,"No False Injected data in node 4");
									}
									else
									{
										imageLabel1.setIcon(ii1);
										imageLabel1.setBounds(610, 450, 50, 100);
										JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
									       
									}
							
								
								}
								
								int l46 = ram.nextInt(20);
								int l47 = ram.nextInt(20);
								
								if(l46<l47)
								{
									Thread.sleep(2000);
									imageLabel46.setIcon(green1);
									imageLabel46.setBounds(270, 79, 120, 250);
									
									imageLabel6.setIcon(ii);
									imageLabel6.setBounds(375, 150, 50, 100);
									
									String sql6 = "select * from router where nodename='n6'";
									ResultSet rs6= stmt.executeQuery(sql6);
									while(rs6.next()==true)
									{
										String h1 = rs6.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 6");
										}
										else
										{
											imageLabel6.setIcon(ii1);
											imageLabel6.setBounds(610, 450, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
								
									
									}
									

									int l68 = ram.nextInt(20);
									int l69 = ram.nextInt(20);
									
									if(l68<l69)
									{
										Thread.sleep(2000);
										imageLabeln68.setIcon(green1);
										imageLabeln68.setBounds(375, -32, 120, 250);
										
										imageLabel10.setIcon(ii);
										imageLabel10.setBounds(492, 25, 50, 100);
										
										String sql8 = "select * from router where nodename='n8'";
										ResultSet rs8 = stmt.executeQuery(sql8);
										while(rs8.next()==true)
										{
											String h1 = rs8.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 8");
											}
											else
											{
												imageLabel10.setIcon(ii1);
												imageLabel10.setBounds(135, 150, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										
										Thread.sleep(2000);
										imageLabeln811.setIcon(green2);
										imageLabeln811.setBounds(450, 70, 175, 155);
										
										imageLabel7.setIcon(ii);
										imageLabel7.setBounds(610, 150, 50, 100);
										
										String sql11 = "select * from router where nodename='n11'";
										ResultSet rs11 = stmt.executeQuery(sql11);
										Statement st1=con.createStatement();
										while(rs11.next()==true)
										{
											String h1 = rs11.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
											}
											else
											{
												imageLabel7.setIcon(ii1);
												imageLabel7.setBounds(610, 150, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"' where nodename='n11'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Injected Data Filtered");
													imageLabel7.setIcon(ii);
													imageLabel7.setBounds(610, 150, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
											
										}
										
										int l1113 = ram.nextInt(20);
										int l1114 = ram.nextInt(20);
										
										if(l1113<l1114)
										{
											Thread.sleep(2000);
											imageLabeln1113.setIcon(green1);
											imageLabeln1113.setBounds(617, -32, 120, 250);
											
											imageLabel11.setIcon(ii);
											imageLabel11.setBounds(710, 25, 50, 100);
											
											String sql13 = "select * from router where nodename='n13'";
											ResultSet rs13 = stmt.executeQuery(sql13);
											while(rs13.next()==true)
											{
												String h1 = rs13.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
												}
												else
												{
													imageLabel11.setIcon(ii1);
													imageLabel11.setBounds(135, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											Thread.sleep(2000);
											imageLabeln1316.setIcon(green2);
											imageLabeln1316.setBounds(650, 70, 175, 155);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
										}
										else if(l1113>l1114)
										{
										
											Thread.sleep(2000);
											imageLabeln1114.setIcon(green2);
											imageLabeln1114.setBounds(550, 210, 200, 138);
											
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											Thread.sleep(2000);
											
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
										
										}
										
									}
									
									else if(l68>l69)
									{
										Thread.sleep(2000);
										imageLabeln69.setIcon(green2);
										imageLabeln69.setBounds(320, 210, 200, 138);
										
										imageLabel2.setIcon(ii);
										imageLabel2.setBounds(500, 300, 50, 100);
										
										
										String sql9 = "select * from router where nodename='n9'";
										ResultSet rs9 = stmt.executeQuery(sql9);
										while(rs9.next()==true)
										{
											String h1 = rs9.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 9");
											}
											else
											{
												imageLabel2.setIcon(ii1);
												imageLabel2.setBounds(500, 300, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										
										int l911 = ram.nextInt(20);
										int l912 = ram.nextInt(20);
										
										if(l911<l912)
										{
											Thread.sleep(2000);
											imageLabel911.setIcon(green1);
											imageLabel911.setBounds(520, 79, 120, 250);
											
											imageLabel7.setIcon(ii);
											imageLabel7.setBounds(610, 150, 50, 100);
											
											
											String sql11 = "select * from router where nodename='n11'";
											ResultSet rs11 = stmt.executeQuery(sql11);
											Statement st1=con.createStatement();
											while(rs11.next()==true)
											{
												String h1 = rs11.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
												}
												else
												{
													imageLabel7.setIcon(ii1);
													imageLabel7.setBounds(610, 150, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"' where nodename='n11'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														imageLabel7.setIcon(ii);
														imageLabel7.setBounds(610, 150, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											
											}
											
											int l1113 = ram.nextInt(20);
											int l1114 = ram.nextInt(20);
											
											if(l1113<l1114)
											{
												Thread.sleep(2000);
												imageLabeln1113.setIcon(green1);
												imageLabeln1113.setBounds(617, -32, 120, 250);
												
												imageLabel11.setIcon(ii);
												imageLabel11.setBounds(710, 25, 50, 100);
												
												String sql13 = "select * from router where nodename='n13'";
												ResultSet rs13 = stmt.executeQuery(sql13);
												while(rs13.next()==true)
												{
													String h1 = rs13.getString(3);
													if(h1.equals(mac))
													{
														JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
													}
													else
													{
														imageLabel11.setIcon(ii1);
														imageLabel11.setBounds(135, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln1316.setIcon(green2);
												imageLabeln1316.setBounds(650, 70, 175, 155);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
													//	JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
												
											}
											else if(l1113>l1114)
											{
												
												
												Thread.sleep(2000);
												
												imageLabeln1114.setIcon(green2);
												imageLabeln1114.setBounds(550, 210, 200, 138);
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
															//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1);
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
											
											}
											
											
											
										}
										else if(l911>l912)
										{
											Thread.sleep(2000);
											imageLabeln912.setIcon(green2);
											imageLabeln912.setBounds(425, 347, 200, 138);
											
											imageLabel14.setIcon(ii);
											imageLabel14.setBounds(610, 450, 50, 100);
											
											
											String sql12 = "select * from router where nodename='n12'";
											ResultSet rs12 = stmt.executeQuery(sql12);
											Statement st1=con.createStatement();
											while(rs12.next()==true)
											{
												String h1 = rs12.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
												}
												else
												{
													imageLabel14.setIcon(ii1);
													imageLabel14.setBounds(610, 450, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														imageLabel14.setIcon(ii);
														imageLabel14.setBounds(610, 450, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											}
											
											int l1214 = ram.nextInt(20);
											int l1215 = ram.nextInt(20);
											
											if(l1214<l1215)
											{
												Thread.sleep(2000);
												imageLabeln1214.setIcon(green1);
												imageLabeln1214.setBounds(610, 250, 120, 250);
												
												
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
														//	JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1);
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
												
												
											}
											else if(l1214>l1215)
											{
												Thread.sleep(2000);
												imageLabeln1512.setIcon(green2);
												imageLabeln1512.setBounds(555, 520, 200, 138);
												
												imageLabel18.setIcon(ii);
												imageLabel18.setBounds(710, 600, 50, 100);
												String sql15 = "select * from router where nodename='n15'";
												ResultSet rs15 = stmt.executeQuery(sql15);
												while(rs15.next()==true)
												{
													String h1 = rs15.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
													}
													else
													{
														imageLabel18.setIcon(ii);
														imageLabel18.setBounds(710, 600, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												Thread.sleep(2000);
												imageLabeln1517.setIcon(green1);
												imageLabeln1517.setBounds(715, 405, 120, 250);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
											}
										}
									}
							
								}
								else if(l46>l47)
								{
									Thread.sleep(2000);
									imageLabeln47.setIcon(green2);
									imageLabeln47.setBounds(185, 347, 200, 138);
									
									imageLabel13.setIcon(ii);
									imageLabel13.setBounds(375, 450, 50, 100);
									
									String sql7 = "select * from router where nodename='n7'";
									ResultSet rs7 = stmt.executeQuery(sql7);
									while(rs7.next()==true)
									{
										String h1 = rs7.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 7");
										}
										else
										{
											imageLabel3.setIcon(ii1);
											imageLabel3.setBounds(610, 450, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
								
									
									}
									
									
									int l79 = ram.nextInt(20);
									int l710 = ram.nextInt(20);
									
									if(l79<l710)
									{
										Thread.sleep(2000);
										imageLabeln79.setIcon(green1);
										imageLabeln79.setBounds(384, 250, 120, 250);
										
										imageLabel2.setIcon(ii);
										imageLabel2.setBounds(500, 300, 50, 100);
										
										
										String sql9 = "select * from router where nodename='n9'";
										ResultSet rs9 = stmt.executeQuery(sql9);
										while(rs9.next()==true)
										{
											String h1 = rs9.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 9");
											}
											else
											{
												imageLabel2.setIcon(ii1);
												imageLabel2.setBounds(500, 300, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										
										int l911 = ram.nextInt(20);
										int l912 = ram.nextInt(20);
										
										if(l911<l912)
										{
											Thread.sleep(2000);
											imageLabel911.setIcon(green1);
											imageLabel911.setBounds(520, 79, 120, 250);
											
											imageLabel7.setIcon(ii);
											imageLabel7.setBounds(610, 150, 50, 100);
											
											
											String sql11 = "select * from router where nodename='n11'";
											ResultSet rs11 = stmt.executeQuery(sql11);
											Statement st1=con.createStatement();
											while(rs11.next()==true)
											{
												String h1 = rs11.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
												}
												else
												{
													imageLabel7.setIcon(ii1);
													imageLabel7.setBounds(610, 150, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"' where nodename='n11'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														imageLabel7.setIcon(ii);
														imageLabel7.setBounds(610, 150, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											
											}
											
											int l1113 = ram.nextInt(20);
											int l1114 = ram.nextInt(20);
											
											if(l1113<l1114)
											{
												Thread.sleep(2000);

												imageLabeln1113.setIcon(green1);
												imageLabeln1113.setBounds(617, -32, 120, 250);
												
												imageLabel11.setIcon(ii);
												imageLabel11.setBounds(710, 25, 50, 100);
												
												String sql13 = "select * from router where nodename='n13'";
												ResultSet rs13 = stmt.executeQuery(sql13);
												while(rs13.next()==true)
												{
													String h1 = rs13.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
													}
													else
													{
														imageLabel11.setIcon(ii1);
														imageLabel11.setBounds(135, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln1316.setIcon(green2);
												imageLabeln1316.setBounds(650, 70, 175, 155);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
												
												
											}
											else if(l1113>l1114)
											{
												
												
												Thread.sleep(2000);
												
												imageLabeln1114.setIcon(green2);
												imageLabeln1114.setBounds(550, 210, 200, 138);
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
															//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1);
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
											
											}
											
											
											
										}
										else if(l911>l912)
										{
											Thread.sleep(2000);
											imageLabeln912.setIcon(green2);
											imageLabeln912.setBounds(425, 347, 200, 138);
											
											imageLabel14.setIcon(ii);
											imageLabel14.setBounds(610, 450, 50, 100);
											
											
											String sql12 = "select * from router where nodename='n12'";
											ResultSet rs12 = stmt.executeQuery(sql12);
											Statement st1=con.createStatement();
											while(rs12.next()==true)
											{
												String h1 = rs12.getString(3);
												if(h1.equals(mac))
												{
													JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
												}
												else
												{
													imageLabel14.setIcon(ii1);
													imageLabel14.setBounds(610, 450, 50, 100);
													int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
													  
													if(opt==0)
													{
														String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
														st1.executeUpdate(sqlf);
														JOptionPane.showMessageDialog(null, "Injected Data Filtered");
														imageLabel14.setIcon(ii);
														imageLabel14.setBounds(610, 450, 50, 100);
													}
													else if(opt==1)
													{
														data = data +injdata;
													}
												       
												}
										
											}
											
											int l1214 = ram.nextInt(20);
											int l1215 = ram.nextInt(20);
											
											if(l1214<l1215)
											{
												Thread.sleep(2000);
												imageLabeln1214.setIcon(green1);
												imageLabeln1214.setBounds(610, 250, 120, 250);
												
												
												
												imageLabel3.setIcon(ii);
												imageLabel3.setBounds(720, 300, 50, 100);
												
												String sql14 = "select * from router where nodename='n14'";
												ResultSet rs14 = stmt.executeQuery(sql14);
												while(rs14.next()==true)
												{
													String h1 = rs14.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
													}
													else
													{
														imageLabel3.setIcon(ii1);
														imageLabel3.setBounds(720, 300, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												int l1416 = ram.nextInt(20);
												int l1417 = ram.nextInt(20);
												
												if(l1416<l1417)
												{
													Thread.sleep(2000);
												imageLabel1416.setIcon(green1);
												imageLabel1416.setBounds(730,79,120,250);
												
												imageLabel8.setIcon(ii);
												imageLabel8.setBounds(810, 150, 50, 100);
												
												String sql16 = "select * from router where nodename='n16'";
												ResultSet rs16 = stmt.executeQuery(sql16);
												while(rs16.next()==true)
												{
													String h1 = rs16.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
													}
													else
													{
														imageLabel8.setIcon(ii1);
														imageLabel8.setBounds(810, 150, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												
												Thread.sleep(2000);
												imageLabeln16s.setIcon(green2);
												imageLabeln16s.setBounds(750, 210, 200, 138);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												}
												
												else if(l1416>l1417)
												{
													Thread.sleep(2000);
													imageLabeln1417.setIcon(green2);
													imageLabeln1417.setBounds(655, 350, 190, 155);
													
													imageLabel15.setIcon(ii);
													imageLabel15.setBounds(810,450, 50, 100);
													String sql17 = "select * from router where nodename='n17'";
													ResultSet rs17 = stmt.executeQuery(sql17);
													while(rs17.next()==true)
													{
														String h1 = rs17.getString(3);
														if(h1.equals(mac))
														{
															//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
														}
														else
														{
															imageLabel15.setIcon(ii1);
															imageLabel15.setBounds(810,450, 50, 100);
															JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
														       
														}
														
													}
													Thread.sleep(2000);
													imageLabeln17s.setIcon(green1);
													imageLabeln17s.setBounds(820, 250, 120, 250);
													
													imageLabel4.setIcon(ii);
													imageLabel4.setBounds(930, 300, 50, 100);
													String sql18 = "select * from router where nodename='n18'";
													ResultSet rs18 = stmt.executeQuery(sql18);
													while(rs18.next()==true)
													{
														String h1 = rs18.getString(3);
														String mac1 = "";
														
														PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
														pout.write(data.getBytes());
														pout.close();
														
															   MessageDigest md = MessageDigest.getInstance("SHA1");
															   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
															   DigestInputStream dis2 = new DigestInputStream(in1, md);
															   BufferedInputStream bd = new BufferedInputStream(dis2);
															   
															   while (true) {
																	int b2 = bd.read();
																	if (b2 == -1)
																		break;
																}
													 
																BigInteger bi2 = new BigInteger(md.digest());
																mac1 = bi2.toString(16);
																System.out.println(mac1);
														
														
														
																if(h1.equals(mac1))
																{
																	JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF("NO False Injected Data In the Data");
																		
																	}
																}
																else
																{
																	imageLabel4.setIcon(ii1);
																	imageLabel4.setBounds(930, 300, 50, 100);
																	if(receiver.equals("A"))
																	{
																		Socket s = new Socket("localhost",100);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																		
																	}
																	else if(receiver.equals("B"))
																	{
																		Socket s = new Socket("localhost",101);
																		DataOutputStream d = new DataOutputStream(s.getOutputStream());
																		d.writeUTF(data);
																		d.writeUTF(" False Injected Data is"+" : "+injdata);
																		
																	}
																       
																}
														
													}
												}
												
												
											}
											else if(l1214>l1215)
											{
												Thread.sleep(2000);
												imageLabeln1512.setIcon(green2);
												imageLabeln1512.setBounds(555, 520, 200, 138);
												
												imageLabel18.setIcon(ii);
												imageLabel18.setBounds(710, 600, 50, 100);
												String sql15 = "select * from router where nodename='n15'";
												ResultSet rs15 = stmt.executeQuery(sql15);
												while(rs15.next()==true)
												{
													String h1 = rs15.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
													}
													else
													{
														imageLabel18.setIcon(ii);
														imageLabel18.setBounds(710, 600, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												Thread.sleep(2000);
												imageLabeln1517.setIcon(green1);
												imageLabeln1517.setBounds(715, 405, 120, 250);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
											
												
												}
												
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
												
											}
											
											
											
										}
										
										
									}
									else if(l79>l710)
									{
										Thread.sleep(2000);
										imageLabeln710.setIcon(green2);
										imageLabeln710.setBounds(320, 520, 200, 138);
										
										imageLabel17.setIcon(ii);
										imageLabel17.setBounds(492, 600, 50, 100);
										
										String sql10 = "select * from router where nodename='n10'";
										ResultSet rs10 = stmt.executeQuery(sql10);
										while(rs10.next()==true)
										{
											String h1 = rs10.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 10");
											}
											else
											{
												imageLabel17.setIcon(ii1);
												imageLabel17.setBounds(492, 600, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										Thread.sleep(2000);
										imageLabeln1012.setIcon(green1);
										imageLabeln1012.setBounds(505, 405, 120, 250);


										
										imageLabel14.setIcon(ii);
										imageLabel14.setBounds(610, 450, 50, 100);
										
										
										String sql12 = "select * from router where nodename='n12'";
										ResultSet rs12 = stmt.executeQuery(sql12);
										Statement st1=con.createStatement();
										while(rs12.next()==true)
										{
											String h1 = rs12.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
											}
											else
											{
												imageLabel14.setIcon(ii1);
												imageLabel14.setBounds(610, 450, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Injected Data Filtered");
													imageLabel14.setIcon(ii);
													imageLabel14.setBounds(610, 450, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
									
										}
										
										int l1214 = ram.nextInt(20);
										int l1215 = ram.nextInt(20);
										
										if(l1214<l1215)
										{
											Thread.sleep(2000);
											imageLabeln1214.setIcon(green1);
											imageLabeln1214.setBounds(610, 250, 120, 250);
											
											
											
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
											
											
										}
										else if(l1214>l1215)
										{
											Thread.sleep(2000);
											imageLabeln1512.setIcon(green2);
											imageLabeln1512.setBounds(555, 520, 200, 138);
											
											imageLabel18.setIcon(ii);
											imageLabel18.setBounds(710, 600, 50, 100);
											String sql15 = "select * from router where nodename='n15'";
											ResultSet rs15 = stmt.executeQuery(sql15);
											while(rs15.next()==true)
											{
												String h1 = rs15.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
												}
												else
												{
													imageLabel18.setIcon(ii);
													imageLabel18.setBounds(710, 600, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											Thread.sleep(2000);
											imageLabeln1517.setIcon(green1);
											imageLabeln1517.setBounds(715, 405, 120, 250);
											
											imageLabel15.setIcon(ii);
											imageLabel15.setBounds(810,450, 50, 100);
											
											String sql17 = "select * from router where nodename='n17'";
											ResultSet rs17 = stmt.executeQuery(sql17);
											while(rs17.next()==true)
											{
												String h1 = rs17.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
												}
												else
												{
													imageLabel15.setIcon(ii1);
													imageLabel15.setBounds(810,450, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											Thread.sleep(2000);
											imageLabeln17s.setIcon(green1);
											imageLabeln17s.setBounds(820, 250, 120, 250);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
										}
										
										
										
									}
								
									
								}
							
							}
							else if(l24>l25)
							{
								Thread.sleep(2000);
								imageLabeln52.setIcon(green2);
								imageLabeln52.setBounds(90, 520, 200, 138);
								
								imageLabel16.setIcon(ii);
								imageLabel16.setBounds(255, 600, 50, 100);
								
								String sql5 = "select * from router where nodename='n5'";
								ResultSet rs5 = stmt.executeQuery(sql5);
								while(rs5.next()==true)
								{
									String h1 = rs5.getString(3);
									if(h1.equals(mac))
									{
										//JOptionPane.showMessageDialog(null,"No False Injected data in node 5");
									}
									else
									{
										imageLabel16.setIcon(ii1);
										imageLabel16.setBounds(255, 600, 50, 100);
										JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
									       
									}
							
								
								}
								Thread.sleep(2000);
								imageLabeln57.setIcon(green1);
								imageLabeln57.setBounds(265, 405, 120, 250);
								
								imageLabel13.setIcon(ii);
								imageLabel13.setBounds(375, 450, 50, 100); //some problem of not displaying the green node
								
								String sql7 = "select * from router where nodename='n7'";
								ResultSet rs7 = stmt.executeQuery(sql7);
								while(rs7.next()==true)
								{
									String h1 = rs7.getString(3);
									if(h1.equals(mac))
									{
										//JOptionPane.showMessageDialog(null,"No False Injected data in node 7");
									}
									else
									{
										imageLabel13.setIcon(ii1);
										imageLabel13.setBounds(375, 450, 50, 100);
										JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
									       
									}
							
								
								}
								
								
								int l79 = ram.nextInt(20);
								int l710 = ram.nextInt(20);
								
								if(l79<l710)
								{
									Thread.sleep(2000);
									imageLabeln79.setIcon(green1);
									imageLabeln79.setBounds(384, 250, 120, 250);
									
									imageLabel2.setIcon(ii);
									imageLabel2.setBounds(500, 300, 50, 100);
									
									
									String sql9 = "select * from router where nodename='n9'";
									ResultSet rs9 = stmt.executeQuery(sql9);
									while(rs9.next()==true)
									{
										String h1 = rs9.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 9");
										}
										else
										{
											imageLabel2.setIcon(ii1);
											imageLabel2.setBounds(500, 300, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
								
									
									}
									
									int l911 = ram.nextInt(20);
									int l912 = ram.nextInt(20);
									
									if(l911<l912)
									{
										Thread.sleep(2000);
										imageLabel911.setIcon(green1);
										imageLabel911.setBounds(520, 79, 120, 250);
										
										imageLabel7.setIcon(ii);
										imageLabel7.setBounds(610, 150, 50, 100);
										
										
										String sql11 = "select * from router where nodename='n11'";
										ResultSet rs11 = stmt.executeQuery(sql11);
										Statement st1=con.createStatement();
										while(rs11.next()==true)
										{
											String h1 = rs11.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
											}
											else
											{
												imageLabel7.setIcon(ii1);
												imageLabel7.setBounds(610, 150, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"' where nodename='n11'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Injected Data Filtered");
													imageLabel7.setIcon(ii);
													imageLabel7.setBounds(610, 150, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
									
										
										}
										
										int l1113 = ram.nextInt(20);
										int l1114 = ram.nextInt(20);
										
										if(l1113<l1114)
										{
											Thread.sleep(2000);

											imageLabeln1113.setIcon(green1);
											imageLabeln1113.setBounds(617, -32, 120, 250);
											
											imageLabel11.setIcon(ii);
											imageLabel11.setBounds(710, 25, 50, 100);
											
											String sql13 = "select * from router where nodename='n13'";
											ResultSet rs13 = stmt.executeQuery(sql13);
											while(rs13.next()==true)
											{
												String h1 = rs13.getString(3);
												if(h1.equals(mac))
												{
												//	JOptionPane.showMessageDialog(null,"No False Injected data in node 13");
												}
												else
												{
													imageLabel11.setIcon(ii1);
													imageLabel11.setBounds(135, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											Thread.sleep(2000);
											imageLabeln1316.setIcon(green2);
											imageLabeln1316.setBounds(650, 70, 175, 155);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
											
										}
										else if(l1113>l1114)
										{
											
											
											
											Thread.sleep(2000);
											imageLabeln1114.setIcon(green2);
											imageLabeln1114.setBounds(550, 210, 200, 138);
											
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
										
										}
										
										
										
									}
									else if(l911>l912)
									{
										Thread.sleep(2000);
										imageLabeln912.setIcon(green2);
										imageLabeln912.setBounds(425, 347, 200, 138);
										
										imageLabel14.setIcon(ii);
										imageLabel14.setBounds(610, 450, 50, 100);
										
										
										String sql12 = "select * from router where nodename='n12'";
										ResultSet rs12 = stmt.executeQuery(sql12);
										Statement st1=con.createStatement();
										while(rs12.next()==true)
										{
											String h1 = rs12.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
											}
											else
											{
												imageLabel14.setIcon(ii1);
												imageLabel14.setBounds(610, 450, 50, 100);
												int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
												  
												if(opt==0)
												{
													String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
													st1.executeUpdate(sqlf);
													JOptionPane.showMessageDialog(null, "Injected Data Filtered");
													imageLabel14.setIcon(ii);
													imageLabel14.setBounds(610, 450, 50, 100);
												}
												else if(opt==1)
												{
													data = data +injdata;
												}
											       
											}
									
										}
										
										int l1214 = ram.nextInt(20);
										int l1215 = ram.nextInt(20);
										
										if(l1214<l1215)
										{
											Thread.sleep(2000);
											imageLabeln1214.setIcon(green1);
											imageLabeln1214.setBounds(610, 250, 120, 250);
											
											
											
											imageLabel3.setIcon(ii);
											imageLabel3.setBounds(720, 300, 50, 100);
											
											String sql14 = "select * from router where nodename='n14'";
											ResultSet rs14 = stmt.executeQuery(sql14);
											while(rs14.next()==true)
											{
												String h1 = rs14.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
												}
												else
												{
													imageLabel3.setIcon(ii1);
													imageLabel3.setBounds(720, 300, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											int l1416 = ram.nextInt(20);
											int l1417 = ram.nextInt(20);
											
											if(l1416<l1417)
											{
												Thread.sleep(2000);
											imageLabel1416.setIcon(green1);
											imageLabel1416.setBounds(730,79,120,250);
											
											imageLabel8.setIcon(ii);
											imageLabel8.setBounds(810, 150, 50, 100);
											
											String sql16 = "select * from router where nodename='n16'";
											ResultSet rs16 = stmt.executeQuery(sql16);
											while(rs16.next()==true)
											{
												String h1 = rs16.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
												}
												else
												{
													imageLabel8.setIcon(ii1);
													imageLabel8.setBounds(810, 150, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											
											Thread.sleep(2000);
											imageLabeln16s.setIcon(green2);
											imageLabeln16s.setBounds(750, 210, 200, 138);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											}
											
											else if(l1416>l1417)
											{
												Thread.sleep(2000);
												imageLabeln1417.setIcon(green2);
												imageLabeln1417.setBounds(655, 350, 190, 155);
												
												imageLabel15.setIcon(ii);
												imageLabel15.setBounds(810,450, 50, 100);
												String sql17 = "select * from router where nodename='n17'";
												ResultSet rs17 = stmt.executeQuery(sql17);
												while(rs17.next()==true)
												{
													String h1 = rs17.getString(3);
													if(h1.equals(mac))
													{
														//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
													}
													else
													{
														imageLabel15.setIcon(ii1);
														imageLabel15.setBounds(810,450, 50, 100);
														JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
													       
													}
													
												}
												Thread.sleep(2000);
												imageLabeln17s.setIcon(green1);
												imageLabeln17s.setBounds(820, 250, 120, 250);
												
												imageLabel4.setIcon(ii);
												imageLabel4.setBounds(930, 300, 50, 100);
												String sql18 = "select * from router where nodename='n18'";
												ResultSet rs18 = stmt.executeQuery(sql18);
												while(rs18.next()==true)
												{
													String h1 = rs18.getString(3);
													String mac1 = "";
													
													PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
													pout.write(data.getBytes());
													pout.close();
													
														   MessageDigest md = MessageDigest.getInstance("SHA1");
														   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
														   DigestInputStream dis2 = new DigestInputStream(in1, md);
														   BufferedInputStream bd = new BufferedInputStream(dis2);
														   
														   while (true) {
																int b2 = bd.read();
																if (b2 == -1)
																	break;
															}
												 
															BigInteger bi2 = new BigInteger(md.digest());
															mac1 = bi2.toString(16);
															System.out.println(mac1);
													
													
													
															if(h1.equals(mac1))
															{
																JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF("NO False Injected Data In the Data");
																	
																}
															}
															else
															{
																imageLabel4.setIcon(ii1);
																imageLabel4.setBounds(930, 300, 50, 100);
																if(receiver.equals("A"))
																{
																	Socket s = new Socket("localhost",100);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																	
																}
																else if(receiver.equals("B"))
																{
																	Socket s = new Socket("localhost",101);
																	DataOutputStream d = new DataOutputStream(s.getOutputStream());
																	d.writeUTF(data);
																	d.writeUTF(" False Injected Data is"+" : "+injdata);
																	
																}
															       
															}
													
												}
											}
											
											
										}
										else if(l1214>l1215)
										{
											Thread.sleep(2000);
											imageLabeln1512.setIcon(green2);
											imageLabeln1512.setBounds(555, 520, 200, 138);
											
											imageLabel18.setIcon(ii);
											imageLabel18.setBounds(710, 600, 50, 100);
											String sql15 = "select * from router where nodename='n15'";
											ResultSet rs15 = stmt.executeQuery(sql15);
											while(rs15.next()==true)
											{
												String h1 = rs15.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
												}
												else
												{
													imageLabel18.setIcon(ii);
													imageLabel18.setBounds(710, 600, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											Thread.sleep(2000);
											imageLabeln1517.setIcon(green1);
											imageLabeln1517.setBounds(715, 405, 120, 250);
											
											imageLabel15.setIcon(ii);
											imageLabel15.setBounds(810,450, 50, 100);
											
											String sql17 = "select * from router where nodename='n17'";
											ResultSet rs17 = stmt.executeQuery(sql17);
											while(rs17.next()==true)
											{
												String h1 = rs17.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
												}
												else
												{
													imageLabel15.setIcon(ii1);
													imageLabel15.setBounds(810,450, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
										
											
											}
											Thread.sleep(2000);
											imageLabeln17s.setIcon(green1);
											imageLabeln17s.setBounds(820, 250, 120, 250);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
											
										}
										
										
										
									}
									
									
								}
								else if(l79>l710)
								{
									Thread.sleep(2000);
									imageLabeln710.setIcon(green2);
									imageLabeln710.setBounds(320, 520, 200, 138);
									
									imageLabel17.setIcon(ii);
									imageLabel17.setBounds(492, 600, 50, 100);
									
									String sql10 = "select * from router where nodename='n10'";
									ResultSet rs10 = stmt.executeQuery(sql10);
									while(rs10.next()==true)
									{
										String h1 = rs10.getString(3);
										if(h1.equals(mac))
										{
											//JOptionPane.showMessageDialog(null,"No False Injected data in node 10");
										}
										else
										{
											imageLabel17.setIcon(ii1);
											imageLabel17.setBounds(492, 600, 50, 100);
											JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
										       
										}
								
									
									}
									Thread.sleep(2000);
									imageLabeln1012.setIcon(green1);
									imageLabeln1012.setBounds(505, 405, 120, 250);


									
									imageLabel14.setIcon(ii);
									imageLabel14.setBounds(610, 450, 50, 100);
									
									
									String sql12 = "select * from router where nodename='n12'";
									ResultSet rs12 = stmt.executeQuery(sql12);
									Statement st1=con.createStatement();
									while(rs12.next()==true)
									{
										String h1 = rs12.getString(3);
										if(h1.equals(mac))
										{
											JOptionPane.showMessageDialog(null,"No False Injected data in node 12");
										}
										else
										{
											imageLabel14.setIcon(ii1);
											imageLabel14.setBounds(610, 450, 50, 100);
											int opt=	JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to  filter it ");
											  
											if(opt==0)
											{
												String sqlf = "Update router set mac='"+mac+"'where nodename='n12'";
												st1.executeUpdate(sqlf);
												JOptionPane.showMessageDialog(null, "Injected Data Filtered");
												imageLabel14.setIcon(ii);
												imageLabel14.setBounds(610, 450, 50, 100);
											}
											else if(opt==1)
											{
												data = data +injdata;
											}
										       
										}
								
									}
									
									int l1214 = ram.nextInt(20);
									int l1215 = ram.nextInt(20);
									
									if(l1214<l1215)
									{
										Thread.sleep(2000);
										imageLabeln1214.setIcon(green1);
										imageLabeln1214.setBounds(610, 250, 120, 250);
										
										
										
										imageLabel3.setIcon(ii);
										imageLabel3.setBounds(720, 300, 50, 100);
										
										String sql14 = "select * from router where nodename='n14'";
										ResultSet rs14 = stmt.executeQuery(sql14);
										while(rs14.next()==true)
										{
											String h1 = rs14.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 14");
											}
											else
											{
												imageLabel3.setIcon(ii1);
												imageLabel3.setBounds(720, 300, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										
										int l1416 = ram.nextInt(20);
										int l1417 = ram.nextInt(20);
										
										if(l1416<l1417)
										{
											Thread.sleep(2000);
										imageLabel1416.setIcon(green1);
										imageLabel1416.setBounds(730,79,120,250);
										
										imageLabel8.setIcon(ii);
										imageLabel8.setBounds(810, 150, 50, 100);
										
										String sql16 = "select * from router where nodename='n16'";
										ResultSet rs16 = stmt.executeQuery(sql16);
										while(rs16.next()==true)
										{
											String h1 = rs16.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 16");
											}
											else
											{
												imageLabel8.setIcon(ii1);
												imageLabel8.setBounds(810, 150, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
											
										}
										
										Thread.sleep(2000);
										imageLabeln16s.setIcon(green2);
										imageLabeln16s.setBounds(750, 210, 200, 138);
										
										imageLabel4.setIcon(ii);
										imageLabel4.setBounds(930, 300, 50, 100);
										String sql18 = "select * from router where nodename='n18'";
										ResultSet rs18 = stmt.executeQuery(sql18);
										while(rs18.next()==true)
										{
											String h1 = rs18.getString(3);
											String mac1 = "";
											
											PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
											pout.write(data.getBytes());
											pout.close();
											
												   MessageDigest md = MessageDigest.getInstance("SHA1");
												   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
												   DigestInputStream dis2 = new DigestInputStream(in1, md);
												   BufferedInputStream bd = new BufferedInputStream(dis2);
												   
												   while (true) {
														int b2 = bd.read();
														if (b2 == -1)
															break;
													}
										 
													BigInteger bi2 = new BigInteger(md.digest());
													mac1 = bi2.toString(16);
													System.out.println(mac1);
											
											
													if(h1.equals(mac1))
													{
														JOptionPane.showMessageDialog(null,"No False Injected data in node sink");
														if(receiver.equals("A"))
														{
															Socket s = new Socket("localhost",100);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF("NO False Injected Data In the Data");
															
															
														}
														else if(receiver.equals("B"))
														{
															Socket s = new Socket("localhost",101);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF("NO False Injected Data In the Data");
															
														}
													}
													else
													{
														imageLabel4.setIcon(ii1);
														imageLabel4.setBounds(930, 300, 50, 100);
														if(receiver.equals("A"))
														{
															Socket s = new Socket("localhost",100);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF(" False Injected Data is"+" : "+injdata);
															
															
														}
														else if(receiver.equals("B"))
														{
															Socket s = new Socket("localhost",101);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF(" False Injected Data is"+" : "+injdata);
															
														}
													       
													}
											
										}
										}
										
										else if(l1416>l1417)
										{
											Thread.sleep(2000);
											imageLabeln1417.setIcon(green2);
											imageLabeln1417.setBounds(655, 350, 190, 155);
											
											imageLabel15.setIcon(ii);
											imageLabel15.setBounds(810,450, 50, 100);
											String sql17 = "select * from router where nodename='n17'";
											ResultSet rs17 = stmt.executeQuery(sql17);
											while(rs17.next()==true)
											{
												String h1 = rs17.getString(3);
												if(h1.equals(mac))
												{
													//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
												}
												else
												{
													imageLabel15.setIcon(ii1);
													imageLabel15.setBounds(810,450, 50, 100);
													JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
												       
												}
												
											}
											Thread.sleep(2000);
											imageLabeln17s.setIcon(green1);
											imageLabeln17s.setBounds(820, 250, 120, 250);
											
											imageLabel4.setIcon(ii);
											imageLabel4.setBounds(930, 300, 50, 100);
											String sql18 = "select * from router where nodename='n18'";
											ResultSet rs18 = stmt.executeQuery(sql18);
											while(rs18.next()==true)
											{
												String h1 = rs18.getString(3);
												String mac1 = "";
												
												PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
												pout.write(data.getBytes());
												pout.close();
												
													   MessageDigest md = MessageDigest.getInstance("SHA1");
													   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
													   DigestInputStream dis2 = new DigestInputStream(in1, md);
													   BufferedInputStream bd = new BufferedInputStream(dis2);
													   
													   while (true) {
															int b2 = bd.read();
															if (b2 == -1)
																break;
														}
											 
														BigInteger bi2 = new BigInteger(md.digest());
														mac1 = bi2.toString(16);
														System.out.println(mac1);
												
												
														if(h1.equals(mac1))
														{
															JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF("NO False Injected Data In the Data");
																
															}
														}
														else
														{
															imageLabel4.setIcon(ii1);
															imageLabel4.setBounds(930, 300, 50, 100);
															if(receiver.equals("A"))
															{
																Socket s = new Socket("localhost",100);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
																
															}
															else if(receiver.equals("B"))
															{
																Socket s = new Socket("localhost",101);
																DataOutputStream d = new DataOutputStream(s.getOutputStream());
																d.writeUTF(data);
																d.writeUTF(" False Injected Data is"+" : "+injdata);
																
															}
														       
														}
												
											}
										}
										
										
									}
									else if(l1214>l1215)
									{
										Thread.sleep(2000);
										imageLabeln1512.setIcon(green2);
										imageLabeln1512.setBounds(555, 520, 200, 138);
										
										imageLabel18.setIcon(ii);
										imageLabel18.setBounds(710, 600, 50, 100);
										String sql15 = "select * from router where nodename='n15'";
										ResultSet rs15 = stmt.executeQuery(sql15);
										while(rs15.next()==true)
										{
											String h1 = rs15.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 15");
											}
											else
											{
												imageLabel18.setIcon(ii);
												imageLabel18.setBounds(710, 600, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										Thread.sleep(2000);
										imageLabeln1517.setIcon(green1);
										imageLabeln1517.setBounds(715, 405, 120, 250);
										
										imageLabel15.setIcon(ii);
										imageLabel15.setBounds(810,450, 50, 100);
										
										String sql17 = "select * from router where nodename='n17'";
										ResultSet rs17 = stmt.executeQuery(sql17);
										while(rs17.next()==true)
										{
											String h1 = rs17.getString(3);
											if(h1.equals(mac))
											{
												//JOptionPane.showMessageDialog(null,"No False Injected data in node 17");
											}
											else
											{
												imageLabel15.setIcon(ii1);
												imageLabel15.setBounds(810,450, 50, 100);
												JOptionPane.showConfirmDialog(jf, "False Data Found Do you want to connect filter it ");
											       
											}
									
										
										}
										Thread.sleep(2000);
										imageLabeln17s.setIcon(green1);
										imageLabeln17s.setBounds(820, 250, 120, 250);
										
										imageLabel4.setIcon(ii);
										imageLabel4.setBounds(930, 300, 50, 100);
										
										String sql18 = "select * from router where nodename='n18'";
										ResultSet rs18 = stmt.executeQuery(sql18);
										while(rs18.next()==true)
										{
											String h1 = rs18.getString(3);
											String mac1 = "";
											
											PrintStream pout=new PrintStream(new FileOutputStream("sink\\"+file+".txt"));
											pout.write(data.getBytes());
											pout.close();
											
												   MessageDigest md = MessageDigest.getInstance("SHA1");
												   FileInputStream in1 = new FileInputStream("sink\\"+file+".txt");
												   DigestInputStream dis2 = new DigestInputStream(in1, md);
												   BufferedInputStream bd = new BufferedInputStream(dis2);
												   
												   while (true) {
														int b2 = bd.read();
														if (b2 == -1)
															break;
													}
										 
													BigInteger bi2 = new BigInteger(md.digest());
													mac1 = bi2.toString(16);
													System.out.println(mac1);
											
											
											
													if(h1.equals(mac1))
													{
														JOptionPane.showMessageDialog(null,"No False Injected data in node 11");
														if(receiver.equals("A"))
														{
															Socket s = new Socket("localhost",100);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF("NO False Injected Data In the Data");
															
															
														}
														else if(receiver.equals("B"))
														{
															Socket s = new Socket("localhost",101);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF("NO False Injected Data In the Data");
															
														}
													}
													else
													{
														imageLabel4.setIcon(ii1);
														imageLabel4.setBounds(930, 300, 50, 100);
														if(receiver.equals("A"))
														{
															Socket s = new Socket("localhost",100);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF(" False Injected Data is"+" : "+injdata);
															
															
														}
														else if(receiver.equals("B"))
														{
															Socket s = new Socket("localhost",101);
															DataOutputStream d = new DataOutputStream(s.getOutputStream());
															d.writeUTF(data);
															d.writeUTF(" False Injected Data is"+" : "+injdata);
															
														}
													       
													}
											
										}
										
									}
									
									
									
								}
							
								
							}
						
				     }
								
			
				}
				
				}catch(Exception ex){
					System.out.println(ex);					
				}
			}
			
			else if(this.port==2002)
			{

				try{
					server = new ServerSocket(2002);
				
				while(true){
					
					s1 = server.accept();
					
					
					DataInputStream in = new DataInputStream(s1
							.getInputStream());
                    
					 injdata = in.readUTF();
					
					String mac1 = in.readUTF();
					String ip = in.readUTF();
					
					Dbcon db = new Dbcon();
					Connection con = db.getConnection();
					Statement stmt = con.createStatement();
				String sql = "Update router set mac='"+mac1+"', message='"+injdata+"', attacker='"+ip+"' where nodename='n12'";
				stmt.executeUpdate(sql);
				
			}
	}
				catch(Exception e)
				{
					e.printStackTrace();
				}
	}
			
			else if(this.port==2003)
			{

				try{
					server = new ServerSocket(2003);
				
				while(true){
					
					s1 = server.accept();
					
					
					DataInputStream in = new DataInputStream(s1
							.getInputStream());
                    
					 injdata = in.readUTF();
					
					String mac1 = in.readUTF();
					String ip = in.readUTF();
					
					Dbcon db = new Dbcon();
					Connection con = db.getConnection();
					Statement stmt = con.createStatement();
				String sql = "Update router set mac='"+mac1+"', message='"+injdata+"' ,attacker='"+ip+"' where nodename='n11'";
				stmt.executeUpdate(sql);
				
			}
	}
				catch(Exception e)
				{
					e.printStackTrace();
				}
	}
			
			
			
		}
	}
		
	
	public static void main(String[] args) {
		new WSN_Router();
		
	}
	
	
}
